const roomType = "A"; // The room type for which we want to find available time slots

const now = new Date();
const tomorrow = new Date(now);
tomorrow.setDate(now.getDate() + 1);

const bookedSlots = await RoomModel.aggregate([
  {
    $match: {
      type: roomType,
      bookings: {
        $elemMatch: {
          start_time: { $lt: tomorrow },
          end_time: { $gt: now }
        }
      }
    }
  },
  {
    $unwind: "$bookings"
  },
  {
    $match: {
      "bookings.start_time": { $lt: tomorrow },
      "bookings.end_time": { $gt: now }
    }
  },
  {
    $group: {
      _id: "$room_id",
      booked_slots: { $push: "$bookings" }
    }
  }
]);

const bookedTimeSlots = bookedSlots.reduce((acc, room) => {
  room.booked_slots.forEach((slot) => {
    acc.push({
      start_time: slot.start_time,
      end_time: slot.end_time
    });
  });
  return acc;
}, []);

const availableSlots = [];
for (let i = 0; i < 24; i++) {
  const startTime = new Date(now);
  startTime.setHours(i, 0, 0, 0);
  const endTime = new Date(now);
  endTime.setHours(i + 1, 0, 0, 0);

  const isBooked = bookedTimeSlots.some((slot) => {
    return (
      startTime.getTime() >= slot.start_time.getTime() &&
      endTime.getTime() <= slot.end_time.getTime()
    );
  });

  if (!isBooked) {
    availableSlots.push({
      start_time: startTime,
      end_time: endTime
    });
  }
}

console.log(availableSlots);

